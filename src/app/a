// src/components/molecules/Accordion/accordion.test.jsx
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { AccordionItem } from "@/router";

describe("AccordionItem", () => {
  const mockToggle = jest.fn();
  const props = {
    index: 0,
    question: "What is your question?",
    answer: "This is the answer to your question.",
    activeIndex: null,
    handleToggle: mockToggle,
  };

  test("renders AccordionItem with question", () => {
    render(<AccordionItem {...props} />);
    expect(screen.getByText("What is your question?")).toBeInTheDocument();
  });

  test("does not show answer when not active", () => {
    render(<AccordionItem {...props} />);
    expect(
      screen.queryByText("This is the answer to your question.")
    ).not.toBeInTheDocument();
  });

  test("shows answer when active", () => {
    render(<AccordionItem {...props} activeIndex={0} />);
    expect(
      screen.getByText("This is the answer to your question.")
    ).toBeInTheDocument();
  });

  test("calls handleToggle when question is clicked", () => {
    render(<AccordionItem {...props} />);
    fireEvent.click(screen.getByText("What is your question?"));
    expect(mockToggle).toHaveBeenCalledWith(props.index);
  });

  test('shows "-" when active and "+" when inactive', () => {
    // Test saat accordion terbuka
    render(<AccordionItem {...props} activeIndex={0} />);
    expect(screen.getByText("-")).toBeInTheDocument();
    expect(screen.queryByText("+")).not.toBeInTheDocument();

    // Test saat accordion tertutup
    render(<AccordionItem {...props} activeIndex={null} />);
    expect(screen.getByText("+")).toBeInTheDocument();
    expect(screen.queryByText("-")).not.toBeInTheDocument();
  });
});
